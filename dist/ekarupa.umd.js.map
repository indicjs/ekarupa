{"version":3,"file":null,"sources":["../lib/ekarupa.js"],"sourcesContent":["export function asciiToUnicode(string, map, options){\n  map = preprocessMap(map);\n  if (options === undefined) {\n    options = {};\n  }\n  if (options.LHSGreatestWidth === undefined) {\n    options.LHSGreatestWidth = calculateLHSGreatestWidth(map.map);\n  }\n  var converted = '';\n  var currIndex = 0;\n  var currentDecodedChar = '';\n  var currentOriginalChar = '';\n  processingLoop:\n  while (currIndex < string.length) {\n    currentOriginalChar = currentDecodedChar = string.slice(currIndex, currIndex + 1);\n    for (let currLHSWidth = options.LHSGreatestWidth; currLHSWidth > 0 ; currLHSWidth--) {\n      if (map.map[string.slice(currIndex, currIndex + currLHSWidth)] !== undefined) {\n        currentDecodedChar = map.map[string.slice(currIndex, currIndex + currLHSWidth)];\n        converted += currentDecodedChar;\n        currIndex += currLHSWidth;\n        // console.log(currentDecodedChar);\n        continue processingLoop;\n      }\n    }\n    converted += currentDecodedChar;\n    currIndex += 1;\n  }\n  var postProcessed = '';\n  currIndex = 0;\n  var currChar = '';\n  var baseFound = false;\n  var prebaseBuffer = '';\n  var baseBuffer = '';\n  while (currIndex < converted.length) {\n    currChar = converted.slice(currIndex, currIndex + 1);\n    if (map.prebase.includes(currChar)) {\n      if (baseFound) {\n        postProcessed += prebaseBuffer;\n        prebaseBuffer = '';\n        baseFound = false;\n      }\n      prebaseBuffer += currChar;\n    } else if (map.joiner.includes(currChar)) {\n      postProcessed += currChar;\n      baseFound = false;\n    } else if (map.postbase.includes(currChar)){\n      postProcessed += prebaseBuffer;\n      prebaseBuffer = '';\n      baseFound = false;\n      postProcessed += currChar;\n    } else {\n      if (baseFound === false) {\n        postProcessed += currChar;\n        baseFound = true;\n      } else {\n        postProcessed += prebaseBuffer;\n        prebaseBuffer = '';\n        postProcessed += currChar;\n      }\n    }\n    currIndex += 1;\n  }\n  for (let rule of Object.keys(map.composition)){\n    postProcessed = postProcessed.replaceAll(rule, map.composition[rule])\n  }\n  return postProcessed;\n}\n\nfunction preprocessMap(map){\n  let processedMap = {};\n  for (let item in map) {\n    if (item === 'map') {\n      let realMap = {};\n      for (let rule of Object.keys(map.map)) {\n        realMap[rule.trim()] = map.map[rule].trim();\n      }\n      realMap[' ']=' ';\n      realMap['\\n']='\\n';\n      processedMap.map = realMap;\n    } else {\n      processedMap[item] = map[item];\n    }\n  }\n  if (processedMap.prebase === undefined) {\n    processedMap.prebase = 'േ െ ൈ ്ര'.split(' ');\n  }\n  if (processedMap.postbase === undefined) {\n    processedMap.postbase = 'ാ ി ീ ു ൂ ഃ'.split(' ');\n  }\n  if (processedMap.joiner === undefined) {\n    processedMap.joiner = '്'.split(' ');\n  }\n  if (processedMap.composition === undefined) {\n    processedMap.composition = {\n      'ോ': 'ോ'\n    };\n  }\n  return processedMap;\n}\n\nString.prototype.replaceAll = function(search, replacement) {\n    var target = this;\n    return target.replace(new RegExp(search, 'g'), replacement);\n};\n\nfunction calculateLHSGreatestWidth(map) {\n  return calculateGreatestWidth(map, 'lhs');\n}\n\nfunction calculateRHSGreatestWidth(map) {\n  return calculateGreatestWidth(map, 'rhs');\n}\n\nfunction calculateGreatestWidth(map, index) {\n  let greatestWidth = 0;\n  for (let key in Object.keys(map)) {\n    if (index === 'lhs') {\n      if (key.length > greatestWidth) {\n        greatestWidth = key.length;\n      }\n    } else if (index === 'rhs') {\n      if (map[key].length > greatestWidth) {\n        greatestWidth = map[key].length;\n      }\n    }\n  }\n  return greatestWidth;\n}\n"],"names":["asciiToUnicode","string","map","options","preprocessMap","undefined","LHSGreatestWidth","calculateLHSGreatestWidth","converted","currIndex","currentDecodedChar","currentOriginalChar","length","slice","currLHSWidth","processingLoop","postProcessed","currChar","baseFound","prebaseBuffer","baseBuffer","prebase","includes","joiner","postbase","Object","keys","composition","rule","replaceAll","processedMap","item","realMap","trim","split","String","prototype","search","replacement","target","replace","RegExp","calculateGreatestWidth","index","greatestWidth","key"],"mappings":"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"}